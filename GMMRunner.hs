{-# LANGUAGE DataKinds
           , FlexibleContexts
           , NegativeLiterals
           , ForeignFunctionInterface
           #-}

module Main where

import           Prelude                          hiding (product)
import           Language.Hakaru.Runtime.Prelude
import           Language.Hakaru.Types.Sing
import           System.CPUTime
import           Data.Time.Clock
import           System.Environment
import           System.IO.Unsafe
import qualified System.Random.MWC                as MWC
import qualified System.Random.MWC.Distributions  as MWCD
import           Control.Monad
import qualified Data.Vector                      as V
import qualified Data.Vector.Generic              as G
import qualified Data.Vector.Storable             as SV


as = G.fromList [1.0, 1.0, 1.0]
t  = G.fromList [8.18103472833022, 3.727624868874195, 2.357318701549487, -6.059272608391253, -7.027409807208044, -5.368879421333348, 3.955960096293677, -6.8517529957574315, 3.7182586548360055, 9.949791310885646, 2.444287227978828, -5.580648138620687, 4.6417794996093775, 9.750789156750574, -6.446804183487765, 2.225664424199784, 5.420102763785182, -6.98003917693962, -8.435626039440422, 2.274208951726376, -8.320988562435414, 2.0142600670125295, 2.4412841972003276, -6.540340730032006, 10.76154992265097, -5.902275294611346, -7.6871600299299345, 9.848157066492412, 2.149157932267485, 9.716050306336596, 2.1067105840781, 0.9384051042196506, -6.680212742422306, 10.76128756874106, 3.0520412278522975, -6.623061165463108, 10.847703445268863, 1.883138457620164, 3.376207374592376, 4.557756464686566, -8.421343831918133, 10.68054924633323, -8.840665309244459, 8.863061843413446, 2.629329749946782, 11.609050797157318, -7.071928407234703, 9.108680887947989, 4.643196464182942, -6.8787597762195025, 0.6254999820156004, 3.245327561772492, 2.648825492202438, -7.830114371190502, 1.2154511825418326, 9.876178235249956, 3.837923511108379, -6.418231967102427, 2.379827559674554, 3.0888725447599685, -5.225118784507931, -6.403952421367585, -3.9355275337328552, -6.812267988507287, 9.393631790368207, -7.185655684843006, 7.102278962771255, -8.381180057834516, -7.616455304435568, -4.872384840830977, 2.8105852443997494, 2.680403058391139, 8.665414241893613, 3.179603076737381, -5.67724537196853, 13.02198918010398, -9.12655304415021, -8.518153743442811, -6.246165329888554, 3.5563752551158108, -8.126097172182886, -5.827406428965625, 9.040954652196564, 10.699650846894237, 8.25387233179844, -7.504272339763446, -7.727942533901447, 4.448296983992959, 8.796575146813073, 2.454698557573777, 1.8840714890173398, -6.757052151780062, -6.82307935662236, -6.120005736739615, 4.4401745032484765, -7.8347730556308095, 11.187008634216665, -6.94365197253919, 3.1106332542059514, 3.994536753528432, -5.9292358342101625, -6.37752405264442, 2.871813003937234, 2.59246133119218, -7.269609814878839, 10.76665251639963, 12.008921113246823, 10.087602208098042, -6.696418278638782, -7.010083257645419, 1.086742341373495, -6.679680993730993, -5.722307597902966, -7.38842644272589, -8.107608815367511, -7.912620791643579, -7.621228615182788, 3.0653388246481432, -7.184100023050793, 2.4966207817984993, 2.38047641309874, -9.305014214340872, -7.103173580555942, 10.394428448334663, -8.621737980209955, -6.940191503456487, -7.792576168794389, 10.114001336765863, -7.7552513162349035, -6.768314703903281, 1.9008330017927424, 2.1404778038803682, -8.238991842346884, 1.8655289361947531, -5.160815177106209, 3.347511054979322, 2.5917240695137065, 1.3907454398795185, 10.307889767212894, -6.545222655246812, 4.269280390181624, 10.599043136130904, -7.22480134625077, -6.716273098928584, 3.514582124989495, -6.896925985385856, 9.641685892637907, 1.1148390773115628, -6.775167510064438, -6.6206300875717154, 8.60385349876456, 3.042158639220466, -7.330140350017013, 2.6680552946471656, -6.202068505318122, 9.493841103460378, -6.433254622138118, 2.713955696660774, -6.596391770595966, -7.436489895249367, 7.729023994977347, 9.600361662998054, -8.736672147383839, 2.921341105894101, 4.163759274563278, -7.438900543844774, 2.1245962593169487, 2.601062667974916, 3.6116035554239576, 3.319017011935109, -7.155463699448723, -4.927820229579677, -6.902118277112219, 2.688493805382613, 9.564384487399884, -7.789709110681084, 4.341537773654204, -8.270299084210349, -8.006718847402174, -7.280344368651049, -6.208277215517659, -6.764011670952138, -6.051011144236099, 9.271224063682531, -7.340666510588845, -6.734598947570833, 2.895700774986008, 2.9205738062419173, -6.088082114868051, -6.076157796001287, 2.2366746795319656, 9.86928246153379, -7.377784408099195, -7.866377791937653, -6.726224919427601, 1.705568885215476, 12.332383389694611, -8.47371946641382, -6.519529812127099, -6.577544650091797, -7.873850084369338, -6.743902023053009, 4.771402303465152, -7.202474420403314, 9.660027616653014, 10.507972698276435, -7.385391263648145, 11.183193759722066, -6.049250446772291, 9.601260656372254, 2.8123657394222246, 3.0342265434110725, -7.420894510440238, 2.700592714934523, -6.353799291961554, 3.943453639702473, 2.028657570839315, 3.9814755801268156, 1.9410172712370022, 9.70251567110179, 12.523518758970265, -6.318113842464632, -7.651471899894159, -7.1729596571391, -6.590813565432551, -6.587621736967256, 2.761078725941526, -9.056966423864807, -7.42118133526587, -8.034634138789094, 3.48207923937936, -5.205960078310562, 9.469906471323318, 11.046573445615671, -7.431934105272923, -7.505492539540233, -7.438197120521962, 3.8354744468992865, 2.1113904573745064, -5.566295774633915, 3.9001611562481444, -7.579456408810121, -7.042793646806522, 3.5354014307658947, 3.865193958366388, -8.894706393038504, 2.7493628108091825, -7.671508330463819, 2.491788031137495, -8.026974791784209, -8.491266563831067, -6.3713337000970345, -7.933970097176001, -8.819945220252622, 3.791769802027897, 3.3041744543140474, 2.196270063622365, 2.3040746659132045, 3.9646365605645255, 2.8752523458383084, -5.140680644057934, 2.3973263626833394, 3.375163260133025, -6.975040401738932, 3.2937514386485076, 5.528176577397613, 10.128570891386381, -6.6310160848142905, 2.6620655420108195, -5.617699338476444, -6.17730238663512, -6.204275536727213, 3.0702903414763387, -5.76990644011031, 3.0349722461119026, -5.312726567140868, 3.3934067131115, -7.338288687258776, 7.807415035080359, 2.642944865260784, -7.432626051496868, -6.908498443433362, 2.9300068105399553, 3.432286611418506, 1.2854113707876114, -6.876401717167693, 2.5144700738213586, 9.318052470918527, 3.3416428237021045, -6.206314183517731, -5.733133507167543, -6.098641203074294, 3.3572293897277525, 2.384463067961181, -5.593380363024501, -5.704283649484079, 9.904196135088045, 3.5826717918058684, -7.961903534773678, -6.943726279371848]

zInit = G.fromList [2, 0, 1, 0, 0, 1, 1, 2, 0, 2, 2, 1, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 0, 0, 1, 0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 0, 2, 1, 2, 0, 2, 1, 2, 1, 0, 1, 0, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 1, 1, 0, 0, 2, 0, 0, 2, 1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 2, 2, 1, 1, 2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 2, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 2, 0, 2, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 1, 2, 1, 0, 1, 1, 0, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0, 2, 1, 1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 1, 0, 1, 2, 0, 1, 1, 2, 1, 1, 1, 0]

gmmGibbs = 
  lam $ \ as0 ->
  lam $ \ z1 ->
  lam $ \ t2 ->
  lam $ \ docUpdate3 ->
  case_ (size z1 == size t2 && docUpdate3 < size z1)
        [branch ptrue
                ((pose (nat2prob (nat_ 2)
                        ** (nat2real (size as0) * fromProb (recip (nat2prob (nat_ 2))) +
                            nat2real (size t2) *
                            fromInt (int_ -1) *
                            fromProb (recip (nat2prob (nat_ 2)))) *
                        pi
                        ** (nat2real (size t2) *
                            fromInt (int_ -1) *
                            fromProb (recip (nat2prob (nat_ 2)))) *
                        exp (summate (nat_ 0)
                                     (size t2)
                                     (\ _a9104 ->
                                      t2 ! _a9104 ^ nat_ 2 *
                                      fromInt (int_ -1) *
                                      fromProb (recip (nat2prob (nat_ 2))))) *
                        product (nat_ 0)
                                (size as0)
                                (\ _a5 ->
                                 product (nat_ 0)
                                         (summate (nat_ 0)
                                                  (size t2)
                                                  (\ _a9107 ->
                                                   case_ (_a9107 == docUpdate3)
                                                         [branch ptrue (nat_ 0),
                                                          branch pfalse
                                                                 (case_ (_a5 == z1 ! _a9107)
                                                                        [branch ptrue (nat_ 1),
                                                                         branch pfalse (nat_ 0)])]))
                                         (\ j6 ->
                                          (nat2prob j6 + as0 ! _a5) *
                                          recip (product (nat_ 0)
                                                         (summate (nat_ 0)
                                                                  (size t2)
                                                                  (\ _a9109 ->
                                                                   case_ (_a9109 == docUpdate3)
                                                                         [branch ptrue (nat_ 0),
                                                                          branch pfalse
                                                                                 (case_ (z1 ! _a9109
                                                                                         < nat_ 0)
                                                                                        [branch ptrue
                                                                                                (nat_ 0),
                                                                                         branch pfalse
                                                                                                (nat_ 1)])]))
                                                         (\ _a8 ->
                                                          nat2prob _a8 +
                                                          summate (nat_ 0)
                                                                  (size as0)
                                                                  (\ _a91010 ->
                                                                   as0
                                                                   ! _a91010)))))) $
                       (categorical (array (size as0) $
                                           \ zNew611 ->
                                           exp (summate (nat_ 0)
                                                        (size as0)
                                                        (\ _a91012 ->
                                                         summate (nat_ 0)
                                                                 (size t2)
                                                                 (\ i13 ->
                                                                  case_ (_a91012
                                                                         == case_ (i13
                                                                                   == docUpdate3)
                                                                                  [branch ptrue
                                                                                          (zNew611),
                                                                                   branch pfalse
                                                                                          (z1
                                                                                           ! i13)])
                                                                        [branch ptrue (t2 ! i13),
                                                                         branch pfalse
                                                                                (nat2real (nat_ 0))]
                                                                  ^ nat_ 2) *
                                                         fromProb (recip (nat2prob (nat_ 1 +
                                                                                    summate (nat_ 0)
                                                                                            (size t2)
                                                                                            (\ i14 ->
                                                                                             case_ (_a91012
                                                                                                    == case_ (i14
                                                                                                              == docUpdate3)
                                                                                                             [branch ptrue
                                                                                                                     (zNew611),
                                                                                                              branch pfalse
                                                                                                                     (z1
                                                                                                                      ! i14)])
                                                                                                   [branch ptrue
                                                                                                           (nat_ 1),
                                                                                                    branch pfalse
                                                                                                           (nat_ 0)])))) *
                                                         fromProb (recip (nat2prob (nat_ 2))))) *
                                           recip (nat_ 2
                                                  `thRootOf` (nat2prob (product (nat_ 0)
                                                                                (size as0)
                                                                                (\ _a15 ->
                                                                                 nat_ 2 +
                                                                                 summate (nat_ 0)
                                                                                         (size t2)
                                                                                         (\ _a91016 ->
                                                                                          case_ (_a15
                                                                                                 == case_ (_a91016
                                                                                                           == docUpdate3)
                                                                                                          [branch ptrue
                                                                                                                  (zNew611),
                                                                                                           branch pfalse
                                                                                                                  (z1
                                                                                                                   ! _a91016)])
                                                                                                [branch ptrue
                                                                                                        (nat_ 1),
                                                                                                 branch pfalse
                                                                                                        (nat_ 0)] *
                                                                                          nat_ 2))))) *
                                           (nat2prob (summate (nat_ 0)
                                                              (size t2)
                                                              (\ _a91017 ->
                                                               case_ (_a91017 == docUpdate3)
                                                                     [branch ptrue (nat_ 0),
                                                                      branch pfalse
                                                                             (case_ (zNew611
                                                                                     == z1
                                                                                        ! _a91017)
                                                                                    [branch ptrue
                                                                                            (nat_ 1),
                                                                                     branch pfalse
                                                                                            (nat_ 0)])])) +
                                            as0 ! zNew611) *
                                           recip (nat2prob (summate (nat_ 0)
                                                                    (size t2)
                                                                    (\ _a91018 ->
                                                                     case_ (_a91018 == docUpdate3)
                                                                           [branch ptrue (nat_ 0),
                                                                            branch pfalse
                                                                                   (case_ (z1
                                                                                           ! _a91018
                                                                                           < nat_ 0)
                                                                                          [branch ptrue
                                                                                                  (nat_ 0),
                                                                                           branch pfalse
                                                                                                  (nat_ 1)])])) +
                                                  summate (nat_ 0)
                                                          (size as0)
                                                          (\ _a91019 -> as0 ! _a91019)))))),
         branch pfalse (reject)]


oneUpdate = do
    g  <- MWC.createSystemRandom
    unMeasure (gmmGibbs as zInit t 3) g
  where size = G.length zInit
        
main = putStrLn "Hello"
