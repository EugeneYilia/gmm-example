fn as array(prob):
fn z array(nat):
fn t array(real):
fn docUpdate nat:
if size(t) == size(z) && docUpdate < size(z):
  weight
    ((2/1) ** (nat2real(size(z)) * (-1/2))
     * exp((summate _a from 0 to size(z): t[_a] ^ 2) * (-1/2))
     * pi ** (nat2real(size(z)) * (-1/2))
     * (product i from 0 to size(as):
        product j
        from 0
        to summate _a from 0 to size(z):
           if _a == docUpdate: 0 else: if i == z[_a]: 1 else: 0:
        nat2prob(j) + as[i])
     / (product i
        from 0
        to summate _a from 0 to size(z): if _a == docUpdate: 0 else: 1:
        nat2prob(i) + (summate _a from 0 to size(as): as[_a]))
     / (nat2prob
          (summate _a from 0 to size(z): if _a == docUpdate: 0 else: 1)
        + (summate _a from 0 to size(as): as[_a])),
     categorical
       (array zNewb of size(as):
        exp
          ((summate _a from 0 to size(as):
            (summate kh from 0 to size(z):
             if _a == (if kh == docUpdate: zNewb else: z[kh]): t[kh]
             else: +0/1) ^
            2
            * prob2real
                (1/ nat2prob
                      ((summate kh from 0 to size(z):
                        if _a == (if kh == docUpdate: zNewb else: z[kh]): 1 else: 0)
                       + 1)))
           * (+1/2))
        / sqrt
            (nat2prob
               (product i from 0 to size(as):
                (summate _a from 0 to size(z):
                 if i == (if _a == docUpdate: zNewb else: z[_a]): 1 else: 0)
                + 1))
        * (nat2prob
             (summate _a from 0 to size(z):
              if _a == docUpdate: 0 else: if zNewb == z[_a]: 1 else: 0)
           + as[zNewb])))
else: reject. measure(nat)
